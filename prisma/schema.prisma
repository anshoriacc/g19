generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model AppSystem {
  name      String   @unique
  config    Json
  updatedAt DateTime @updatedAt
}

model User {
  id        Int      @id @default(autoincrement())
  username  String   @unique @db.VarChar(20)
  email     String   @unique
  name      String
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Reservation {
  id            String          @id @default(uuid())
  type          ReservationType
  startDate     DateTime
  endDate       DateTime?
  includeDriver Boolean
  total         Int
  name          String
  phone         String
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt

  Vehicle   Vehicle? @relation(fields: [vehicleId], references: [id])
  vehicleId Int?
  Tour      Tour?    @relation(fields: [tourId], references: [id])
  tourId    Int?
  Carter    Carter?  @relation(fields: [carterId], references: [id])
  carterId  Int?
}

model Vehicle {
  id                Int          @id @default(autoincrement())
  name              String
  description       String
  capacity          Int
  price             Int
  isDriverMandatory Boolean      @default(true)
  transmission      Transmission
  quantity          Int
  createdAt         DateTime     @default(now())
  updatedAt         DateTime     @updatedAt

  vehicleImages VehicleImage[]
  reservations  Reservation[]
}

model VehicleImage {
  id       Int    @id @default(autoincrement())
  imageUrl String

  Vehicle   Vehicle? @relation(fields: [vehicleId], references: [id])
  vehicleId Int?
}

model Tour {
  id           Int              @id @default(autoincrement())
  name         String
  description  String
  capacity     Int
  price        Int
  duration     Int
  quantity     Int
  availability TourAvailability
  createdAt    DateTime         @default(now())
  updatedAt    DateTime         @updatedAt

  tourImages      TourImage[]
  tourHighlights  TourHighlight[]
  tourItineraries TourItinerary[]
  tourDates       TourDate[]
  reservations    Reservation[]
}

model TourImage {
  id       Int    @id @default(autoincrement())
  imageUrl String

  Tour   Tour? @relation(fields: [tourId], references: [id])
  tourId Int?
}

model TourHighlight {
  id        Int    @id @default(autoincrement())
  highlight String

  Tour   Tour? @relation(fields: [tourId], references: [id])
  tourId Int?
}

model TourItinerary {
  id        Int      @id @default(autoincrement())
  time      String[]
  itinerary String[]

  Tour   Tour? @relation(fields: [tourId], references: [id])
  tourId Int?
}

model TourDate {
  id        Int       @id @default(autoincrement())
  startDate DateTime
  endDate   DateTime?

  Tour   Tour? @relation(fields: [tourId], references: [id])
  tourId Int?
}

model Carter {
  id          Int      @id @default(autoincrement())
  name        String
  description String
  capacity    Int
  price       Int
  quantity    Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  carterImages CarterImage[]
  reservations Reservation[]
}

model CarterImage {
  id       Int    @id @default(autoincrement())
  imageUrl String

  Carter   Carter? @relation(fields: [carterId], references: [id])
  carterId Int?
}

model Banner {
  id          Int      @id @default(autoincrement())
  title       String
  imageUrl    String
  url         String
  isDisplayed Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

enum Transmission {
  MANUAL
  AUTOMATIC
}

enum TourAvailability {
  EVERYDAY
  SCHEDULED
}

enum ReservationType {
  RENTAL
  TOUR
  CARTER
}

enum ReservationStatus {
  CONFIRMED
  ON_GOING
  COMPLETED
  CANCELLED
}
