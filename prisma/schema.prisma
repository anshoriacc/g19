generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model AppSystem {
  id        String   @id @default(cuid())
  name      String   @unique
  config    Json
  updatedAt DateTime @updatedAt
}

model User {
  id        String    @id @default(cuid())
  username  String    @unique @db.VarChar(20)
  email     String    @unique
  name      String
  password  String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  accounts  Account[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Reservation {
  id            String          @id @default(cuid())
  type          ReservationType
  startDate     DateTime
  endDate       DateTime?
  includeDriver Boolean
  total         Int
  name          String
  phone         String
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  vehicleId     String?
  tourId        String?
  carterId      String?
  Carter        Carter?         @relation(fields: [carterId], references: [id])
  Tour          Tour?           @relation(fields: [tourId], references: [id])
  Vehicle       Vehicle?        @relation(fields: [vehicleId], references: [id])
}

model Vehicle {
  id                String         @id @default(cuid())
  name              String
  description       String
  capacity          Int
  price             Int
  isDriverMandatory Boolean        @default(true)
  transmission      Transmission
  quantity          Int
  createdAt         DateTime       @default(now())
  updatedAt         DateTime       @updatedAt
  highlights        Highlight[]
  reservations      Reservation[]
  vehicleImages     VehicleImage[]
}

model VehicleImage {
  id        Int      @id @default(autoincrement())
  imageUrl  String
  vehicleId String?
  Vehicle   Vehicle? @relation(fields: [vehicleId], references: [id])
}

model Tour {
  id              String           @id @default(cuid())
  name            String
  description     String
  capacity        Int
  price           Int
  duration        Int
  quantity        Int
  availability    TourAvailability
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  highlights      Highlight[]
  reservations    Reservation[]
  tourDates       TourDate[]
  tourImages      TourImage[]
  tourItineraries TourItinerary[]
}

model TourImage {
  id       Int     @id @default(autoincrement())
  imageUrl String
  tourId   String?
  Tour     Tour?   @relation(fields: [tourId], references: [id])
}

model Highlight {
  id        Int      @id @default(autoincrement())
  highlight String
  vehicleId String?
  tourId    String?
  carterId  String?
  Carter    Carter?  @relation(fields: [carterId], references: [id])
  Tour      Tour?    @relation(fields: [tourId], references: [id])
  Vehicle   Vehicle? @relation(fields: [vehicleId], references: [id])
}

model TourItinerary {
  id        Int     @id @default(autoincrement())
  tourId    String?
  itinerary Json
  Tour      Tour?   @relation(fields: [tourId], references: [id])
}

model TourDate {
  id        Int       @id @default(autoincrement())
  startDate DateTime
  endDate   DateTime?
  tourId    String?
  Tour      Tour?     @relation(fields: [tourId], references: [id])
}

model Carter {
  id           String        @id @default(cuid())
  name         String
  description  String
  capacity     Int
  price        Int
  quantity     Int
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  carterImages CarterImage[]
  highlights   Highlight[]
  reservations Reservation[]
}

model CarterImage {
  id       Int     @id @default(autoincrement())
  imageUrl String
  carterId String?
  Carter   Carter? @relation(fields: [carterId], references: [id])
}

model Banner {
  id          Int      @id @default(autoincrement())
  title       String
  imageUrl    String
  url         String
  isDisplayed Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

enum Transmission {
  MANUAL
  AUTOMATIC
}

enum TourAvailability {
  EVERYDAY
  SCHEDULED
}

enum ReservationType {
  RENTAL
  TOUR
  CARTER
}

enum ReservationStatus {
  CONFIRMED
  ON_GOING
  COMPLETED
  CANCELLED
}
